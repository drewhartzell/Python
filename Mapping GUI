import tkinter as tk
from tkinter import filedialog, messagebox
import subprocess, sys, threading, os

# Global variables to store file paths
template_file = ""
data_file = ""

def browse_template():
    global template_file
    file_path = filedialog.askopenfilename(
        title="Select Template File",
        filetypes=(("Excel Files", "*.xlsx;*.xls"), ("All Files", "*.*"))
    )
    if file_path:
        template_file = file_path
        template_label.config(text=f"Template File: {file_path}")
    return file_path

def browse_data():
    global data_file
    file_path = filedialog.askopenfilename(
        title="Select Data File",
        filetypes=(("CSV Files", "*.csv"), ("All Files", "*.*"))
    )
    if file_path:
        data_file = file_path
        data_label.config(text=f"Data File: {file_path}")
    return file_path

def run_mapping():
    # Read vendor code from the entry field
    vendor_code = vendor_entry.get().strip()
    
    # Check that both files and vendor code are provided
    if not template_file or not data_file or not vendor_code:
        message_label.config(text="✘ Please select both files and enter a Vendor File Code!", fg="#777")
        return

    # Disable the Run button during processing and clear any previous message
    run_button.config(state="disabled")
    message_label.config(text="")
    
    # Start the mapping process in a separate thread so that the UI stays responsive
    threading.Thread(target=run_mapping_thread, args=(vendor_code,), daemon=True).start()

def run_mapping_thread(vendor_code):
    # Determine which script to run based on the dropdown selection
    product = product_var.get()
    if product == "Enr":
        script_to_run = "enrollment load v2.py"
    elif product == "Med":
        script_to_run = "medical load v2.py"
    elif product == "Rx":
        script_to_run = "pharmacy load v2.py"
    else:
        script_to_run = "pharmacy load.py"

    # Locate the script. When frozen, use sys._MEIPASS.
    if getattr(sys, 'frozen', False):
        bundle_dir = sys._MEIPASS
    else:
        bundle_dir = os.path.dirname(os.path.abspath(__file__))
    
    script_path = os.path.join(bundle_dir, script_to_run)
    
    try:
        # Run the selected script passing the file paths and vendor code as arguments
        result = subprocess.run(
            [sys.executable, script_path, template_file, data_file, vendor_code],
            capture_output=True, text=True
        )
        print("Script Output:", result.stdout)
        print("Script Error:", result.stderr)
        # On completion, re-enable the Run button and inform the user
        root.after(0, mapping_complete, True)
    except Exception as e:
        print("Error running script:", e)
        root.after(0, mapping_complete, False)

def mapping_complete(success):
    run_button.config(state="normal")
    if success:
        message_label.config(text="✓ Mapping completed successfully!", fg="#777")
    else:
        message_label.config(text="✘ An error occurred during mapping.", fg="#777")

# Set up the main window
root = tk.Tk()
root.title("Mapping Tool")
root.geometry("500x575")
root.configure(bg="#f5f5f5")
root.eval('tk::PlaceWindow . center')  # Center the window

# Use a modern font
import tkinter.font as tkFont
font = tkFont.Font(family="Helvetica", size=12, weight="bold")

# Header label
header_label = tk.Label(root, text="Mapping Tool", font=("Helvetica", 18, "bold"), fg="#333", bg="#f5f5f5")
header_label.pack(pady=20)

# TOP SECTION: A frame with two rows for Vendor File Code and Product Type titles and their fields.
top_section = tk.Frame(root, bg="#f5f5f5")
top_section.pack(pady=10, fill="x", padx=20)

# Configure grid to equally space two columns
top_section.columnconfigure(0, weight=1)
top_section.columnconfigure(1, weight=1)

# Row 1: Title labels
vendor_title = tk.Label(top_section, text="Vendor File Code:", font=font, bg="#f5f5f5", fg="#555")
vendor_title.grid(row=0, column=0, sticky="ew", padx=5)
product_title = tk.Label(top_section, text="Select Product Type:", font=font, bg="#f5f5f5", fg="#555")
product_title.grid(row=0, column=1, sticky="ew", padx=5)

# Row 2: Input field and dropdown
vendor_entry = tk.Entry(top_section, font=font, width=15)
vendor_entry.grid(row=1, column=0, sticky="ew", padx=5, pady=(5, 0))
product_var = tk.StringVar(value="Enr")
product_dropdown = tk.OptionMenu(top_section, product_var, "Enr", "Med", "Rx")
product_dropdown.config(font=font, width=15)
product_dropdown.grid(row=1, column=1, sticky="ew", padx=5, pady=(5, 0))

# Instruction label for file selection (placed just below the top section)
instruction_label = tk.Label(root, text="Select your files:", font=font, bg="#f5f5f5", fg="#555")
instruction_label.pack(pady=10)

# Helper function to create buttons with the requested visual styling
def create_button(text, command, width=20):
    return tk.Button(
        root,
        text=text,
        command=command,
        font=font,
        width=width,
        relief="solid",
        bd=2,
        fg="white",
        bg="#293c5b",
        activebackground="#1f2e45",
        activeforeground="white",
        highlightthickness=0,
        pady=10,
        padx=10
    )

# Browse Template button
browse_template_button = create_button("Browse Template", browse_template)
browse_template_button.pack(pady=10)

# Label for selected template file (with wrapping and padding)
template_label = tk.Label(root, text="Template File: None", font=font, bg="#f5f5f5", fg="#777",
                          wraplength=450, justify="center", padx=10)
template_label.pack(pady=5)

# Browse Data button
browse_data_button = create_button("Browse Data", browse_data)
browse_data_button.pack(pady=10)

# Label for selected data file (with wrapping and padding)
data_label = tk.Label(root, text="Data File: None", font=font, bg="#f5f5f5", fg="#777",
                      wraplength=450, justify="center", padx=10)
data_label.pack(pady=5)

# Bottom frame to hold the Run button and feedback message
bottom_frame = tk.Frame(root, bg="#f5f5f5")
bottom_frame.pack(side="bottom", fill="x", pady=(20, 10))

# Run button (fixed in the bottom frame)
run_button = create_button("Run", run_mapping)
run_button.pack(in_=bottom_frame, pady=(0,10))

# Message label for feedback (below the Run button)
message_label = tk.Label(bottom_frame, text="", font=font, bg="#f5f5f5", fg="#777",
                         wraplength=450, justify="center")
message_label.pack()

root.eval('tk::PlaceWindow . center')
root.mainloop()


---------------------------------------------------------------------------------------------------------------------


#!/usr/bin/env python3
import sys
import pandas as pd
from openpyxl import load_workbook
import os

# Check for command line arguments (expecting 4 arguments: template, data, vendor code)
if len(sys.argv) != 4:
    sys.exit("Usage: python mapping_script.py <template_file> <data_file> <vendor_file_code>")

# Get file paths and vendor file code from command-line arguments
template_file = sys.argv[1]
data_file = sys.argv[2]
vendor_code = sys.argv[3]

# Determine file type and load the healthcare data
file_extension = data_file.split('.')[-1].lower()

if file_extension == "csv":
    file = pd.read_csv(data_file)
# elif file_extension in ["xls", "xlsx"]:
    # file = pd.read_excel(data_file)
elif file_extension in ["xlsx", "xls"]:
    try:
        # Load the first sheet of the Excel file
        file = pd.read_excel(data_file, sheet_name=0, dtype=str)

        # Remove leading/trailing spaces from column names
        file.columns = file.columns.str.strip()
        
        # If empty, raise an error
        if file.empty:
            sys.exit("Error: The selected Excel file is empty.")

    except Exception as e:
        sys.exit(f"Error reading Excel file: {e}")
   
# elif file_extension == "txt":
    # file = pd.read_csv(data_file, delimiter="\t")  # Assumes tab-delimited; adjust if needed
elif file_extension == "txt":
    try:
        # Attempt to automatically detect delimiter
        with open(data_file, 'r', encoding='utf-8') as f:
            first_line = f.readline()
            # Check for common delimiters
            if '\t' in first_line:
                delimiter = '\t'  # Tab-separated
            elif ',' in first_line:
                delimiter = ','  # Comma-separated
            elif '|' in first_line:
                delimiter = '|'  # Pipe-separated
            elif ' ' in first_line:
                delimiter = ' '  # Space-separated (not ideal)
            else:
                delimiter = '\t'  # Default to tab

        # Read file with detected delimiter
        file = pd.read_csv(data_file, delimiter=delimiter)
    except Exception as e:
        sys.exit(f"Error reading TXT file: {e}")

else:
    sys.exit(f"Unsupported file format: {file_extension}")

# Initialize an empty dictionary to store mappings
data_mapping = {}

# Define a function to map values to columns
def map_values_to_columns(column_name, values, mapping):
    mapping[column_name] = 'Error'  # Default to 'Error' if no mapping is found

    if column_name not in mapping:
        mapping[column_name] = column_name  # Default to the same column name



     ### Subscriber Info



    if (any(substring in column_name.lower() for substring in ['first', 'firstname','first name','fname'])
        and (any(substring in column_name.lower() for substring in ['sub', 'emp','subscriber','employee','EE']))
            and all((str(value).replace(".", "").replace("'", "").replace(" ", "").isalpha()) for value in values)):
                mapping[column_name] = 'Subscriber First Name'
# Encompasses values that have middle initials and apostrophies within the first name when applicable

    elif (any(substring in column_name.lower() for substring in ['last', 'lastname','last name','lname'])
        and (any(substring in column_name.lower() for substring in ['sub', 'emp','subscriber','employee','EE']))
            and all((str(value).replace("'", "").replace("-", "").replace(" ", "").isalpha()) for value in values)):
                mapping[column_name] = 'Subscriber Last Name'
# Encompasses values that have hyphenated last names and apostrophies within the last name when applicable
                
    elif (any(substring in column_name.lower() for substring in ['middle', 'initial','mid','init','mname'])
        and (any(substring in column_name.lower() for substring in ['sub', 'emp','subscriber','employee','EE']))
            and all((str(value).replace(".", "").replace("-", "").replace(" ", "").isalpha()) for value in values)):
                mapping[column_name] = 'Subscriber Middle Name'
# Encompasses values that have hyphenated middle names and initials within the middle name when applicable
                
    elif (any(substring in column_name.lower() for substring in ['prefix'])
        and (any(substring in column_name.lower() for substring in ['sub', 'emp','subscriber','employee','EE']))
            and all((str(value).replace(".", "").replace(" ", "").isalpha()) for value in values)):
                mapping[column_name] = 'Subscriber Name Prefix'
# Encompasses values that have periods within the prefix
                
    elif (any(substring in column_name.lower() for substring in ['suffix'])
        and (any(substring in column_name.lower() for substring in ['sub', 'emp','subscriber','employee','EE']))
            and all((str(value).replace(".", "").replace(" ", "").isalnum() for value in values))):
                mapping[column_name] = 'Subscriber Name Suffix'
# Encompasses values that have periods, alpha characters or integers within the prefix
                
    elif (any(substring in column_name.lower() for substring in ['ssn','social'])
        and (any(substring in column_name.lower() for substring in ['sub','emp','subscriber','employee','EE']))
            and all((str(value).replace("-", "").replace(" ", "").isdigit()) for value in values)):
                mapping[column_name] = 'Subscriber SSN'
# Encompasses values that have only integers or hyphenated SSNs

    elif (any(substring in column_name.lower() for substring in ['id'])
        and (any(substring in column_name.lower() for substring in ['sub', 'emp','subscriber','employee','EE']))
            and all((str(value).replace("-", "").replace(" ", "").isalnum()) or (str(value).replace("-", "").replace(" ", "").isdigit()) for value in values)):
                mapping[column_name] = 'Subscriber ID (Vendor)'
# Encompasses values that are alphanumberical and have hyphens when applicable
                
    elif (any(substring in column_name.lower() for substring in ['dob','birth','bday'])
        and (any(substring in column_name.lower() for substring in ['sub','emp','subscriber','employee','EE']))
            and all(is_date(value) or (str(value).replace("-", "").replace("/", "").replace(" ", "").isdigit()) for value in values)):
                mapping[column_name] = 'Subscriber Date of Birth'
# Encompasses values that are date fields, string values of only digits, or string values separated by hyphens or slashes
                
    elif (any(substring in column_name.lower() for substring in ['gender','sex'])
        and (any(substring in column_name.lower() for substring in ['sub', 'emp','subscriber','employee','EE']))
            and all((str(value).replace(" ", "").isalnum() for value in values))):
                mapping[column_name] = 'Subscriber Gender'
# Encompasses values of 'F', 'Female', or '02' alpha characters or integers within gender codes
                
        ## Demo Info
                
    elif (any(substring in column_name.lower() for substring in ['addr','address'])
        and (any(substring in column_name.lower() for substring in ['sub', 'emp','subscriber','employee','EE']))
            and (any(substring in column_name.lower() for substring in ['2']))
                and all((str(value).replace(".", "").replace("#", "").replace(",", "").replace(" ", "").isalnum() for value in values))):
                    mapping[column_name] = 'Subscriber Address 2'        
# Encompasses values that are alphanumberical, include periods, commas, and pound signs
                    
    elif (any(substring in column_name.lower() for substring in ['addr','address'])
        and (any(substring in column_name.lower() for substring in ['sub', 'emp','subscriber','employee','EE']))
            and all((str(value).replace(".", "").replace("#", "").replace(",", "").replace(" ", "").isalnum() for value in values))):
                mapping[column_name] = 'Subscriber Address'            
# Encompasses values that are alphanumberical, include periods, commas, and pound signs

    elif (any(substring in column_name.lower() for substring in ['city'])
        and (any(substring in column_name.lower() for substring in ['sub', 'emp','subscriber','employee','EE']))
            and all((str(value).replace("-", "").replace(" ", "").isalpha()) for value in values)):
                mapping[column_name] = 'Subscriber City'
# Encompasses values that are only alpha characters and hyphenated cities
                
    elif (any(substring in column_name.lower() for substring in ['state'])
        and (any(substring in column_name.lower() for substring in ['sub', 'emp','subscriber','employee','EE']))
            and all((str(value).replace(" ", "").isalpha()) for value in values)):
                mapping[column_name] = 'Subscriber State'
# Encompasses values that are only alpha characters
                
    elif (any(substring in column_name.lower() for substring in ['zip','zcode'])
        and (any(substring in column_name.lower() for substring in ['sub','emp','subscriber','employee','EE']))
            and all((str(value).replace("-", "").replace(" ", "").isdigit()) for value in values)):
                mapping[column_name] = 'Subscriber Zip Code'
# Encompasses values that are 5 digits long or hyphenated 9 digit zip codes


        ### Member Info
                
                
    elif (any(substring in column_name.lower() for substring in ['first', 'firstname','first name','fname'])
        and (any(substring in column_name.lower() for substring in ['mem', 'member','dep','dependent']))
            and all((str(value).replace(".", "").replace("'", "").replace(" ", "").isalpha()) for value in values)):
                mapping[column_name] = 'Member First Name'
# Encompasses values that have middle initials within the first name when applicable and apostrophies with the first name
                
    elif (any(substring in column_name.lower() for substring in ['last', 'lastname','last name','lname'])
        and (any(substring in column_name.lower() for substring in ['mem', 'member','dep','dependent']))
            and all((str(value).replace("'", "").replace("-", "").replace(" ", "").isalpha()) for value in values)):
                mapping[column_name] = 'Member Last Name'
# Encompasses values that have hyphenated last names and apostrophies within the last name when applicable
                
    elif (any(substring in column_name.lower() for substring in ['middle', 'initial','mid','init','mname'])
        and (any(substring in column_name.lower() for substring in ['mem', 'member','dep','dependent']))
            and all((str(value).replace(".", "").replace("-", "").replace(" ", "").isalpha()) for value in values)):
                mapping[column_name] = 'Member Middle Name'
# Encompasses values that have hyphenated middle names and initials within the middle name when applicable
                
    elif (any(substring in column_name.lower() for substring in ['prefix'])
        and (any(substring in column_name.lower() for substring in ['mem', 'member','dep','dependent']))
            and all((str(value).replace(".", "").replace(" ", "").isalpha()) for value in values)):
                mapping[column_name] = 'Member Name Prefix'
# Encompasses values that have periods within the prefix
                
    elif (any(substring in column_name.lower() for substring in ['suffix'])
        and (any(substring in column_name.lower() for substring in ['mem', 'member','dep','dependent']))
            and all((str(value).replace(".", "").replace(" ", "").isalnum() for value in values))):
                mapping[column_name] = 'Member Name Suffix'
# Encompasses values that have periods, alpha characters or integers within the prefix
                
    elif (any(substring in column_name.lower() for substring in ['ssn','social'])
        and (any(substring in column_name.lower() for substring in ['mem', 'member','dep','dependent']))
            and all((str(value).replace("-", "").replace(" ", "").isdigit()) for value in values)):
                mapping[column_name] = 'Member SSN'
# Encompasses values that have only integers or hyphenated SSNs
                
    elif (any(substring in column_name.lower() for substring in ['id'])
        and (any(substring in column_name.lower() for substring in ['mem', 'member','dep','dependent']))
            and all((str(value).replace("-", "").replace(" ", "").isalnum() for value in values))):
                mapping[column_name] = 'Member ID (Vendor)'
# Encompasses values that are alphanumberical and have hyphens when applicable
                
    elif (any(substring in column_name.lower() for substring in ['dob','birth','bday'])
        and (any(substring in column_name.lower() for substring in ['mem', 'member','dep','dependent']))
            and all(is_date(value) or (str(value).replace("-", "").replace("/", "").replace(" ", "").isdigit()) for value in values)):
                mapping[column_name] = 'Member Date of Birth'
# Encompasses values that are date fields, string values of only digits, or string values separated by hyphens or slashes
                
    elif (any(substring in column_name.lower() for substring in ['gender','sex'])
        and (any(substring in column_name.lower() for substring in ['mem', 'member','dep','dependent']))
            and all((str(value).replace(" ", "").isalnum() for value in values))):
                mapping[column_name] = 'Member Gender'
# Encompasses values of 'F', 'Female', or '02' alpha characters or integers within gender codes
                
        ## Demo Info
                
    elif (any(substring in column_name.lower() for substring in ['addr','address'])
        and (any(substring in column_name.lower() for substring in ['mem', 'member','dep','dependent']))
            and (any(substring in column_name.lower() for substring in ['2']))
                and all((str(value).replace(".", "").replace("#", "").replace(",", "").replace(" ", "").isalnum() for value in values))):
                    mapping[column_name] = 'Member Address 2' 
# Encompasses values that are alphanumberical, include periods, commas, and pound signs
                    
    elif (any(substring in column_name.lower() for substring in ['addr','address'])
        and (any(substring in column_name.lower() for substring in ['mem', 'member','dep','dependent']))
            and all((str(value).replace(".", "").replace("#", "").replace(",", "").replace(" ", "").isalnum() for value in values))):
                mapping[column_name] = 'Member Address'            
# Encompasses values that are alphanumberical, include periods, commas, and pound signs
        
    elif (any(substring in column_name.lower() for substring in ['city'])
        and (any(substring in column_name.lower() for substring in ['mem', 'member','dep','dependent']))
            and all((str(value).replace("-", "").replace(" ", "").isalpha()) for value in values)):
                mapping[column_name] = 'Member City'
# Encompasses values that are only alpha characters and hyphenated cities
                
    elif (any(substring in column_name.lower() for substring in ['state'])
        and (any(substring in column_name.lower() for substring in ['mem', 'member','dep','dependent']))
            and all((str(value).replace(" ", "").isalpha()) for value in values)):
                mapping[column_name] = 'Member State'
# Encompasses values that are only alpha characters

    elif (any(substring in column_name.lower() for substring in ['zip','zcode'])
        and (any(substring in column_name.lower() for substring in ['mem', 'member','dep','dependent']))
            and all((str(value).replace("-", "").replace(" ", "").isdigit()) for value in values)):
                mapping[column_name] = 'Member Zip Code'
# Encompasses values that are 5 digits long or hyphenated 9 digit zip codes


        ### Date Info
                

    elif (any(substring in column_name.lower() for substring in ['from','effective','begin','start','cov','coverage'])
        and (any(substring in column_name.lower() for substring in ['dt','date']))
            and all(is_date(value) or (str(value).replace("-", "").replace("/", "").replace(" ", "").isdigit()) for value in values)):
                mapping[column_name] = 'Coverage Start Date'
# Encompasses values that are date fields, string values of only digits, or string values separated by hyphens or slashes

    elif (any(substring in column_name.lower() for substring in ['to','cancel','end','thru','cov','coverage'])
        and (any(substring in column_name.lower() for substring in ['dt','date']))
            and all(is_date(value) or (str(value).replace("-", "").replace("/", "").replace(" ", "").isdigit()) for value in values)):
                mapping[column_name] = 'Coverage End Date'
# Encompasses values that are date fields, string values of only digits, or string values separated by hyphens or slashes


        ### Coverage/Relationship
                

    elif (any(substring in column_name.lower() for substring in ['rel','relationship'])
        and (any(substring in column_name.lower() for substring in ['code', 'tier','cd']))
            and all((str(value).replace("+", "").replace("(", "").replace(")", "").replace("-", "").replace(" ", "").isalnum() for value in values))):
                mapping[column_name] = 'Member-Subscriber Relationship'
# Encompasses values that are alphanumberical, include paratheses, plus signs, and hyphens
                
    elif (any(substring in column_name.lower() for substring in ['cov','coverage'])
        and (any(substring in column_name.lower() for substring in ['code','level','tier','cd']))
            and all((str(value).replace("+", "").replace("(", "").replace(")", "").replace("-", "").replace(" ", "").isalnum() for value in values))):
                mapping[column_name] = 'Coverage Tier'
# Encompasses values that are alphanumberical, include paratheses, plus signs, and hyphens



        # If no specific mapping is found, you can leave it as is
    if column_name not in mapping:
        mapping[column_name] = column_name  # Default to the same column name

def is_date(value):
    try:
        pd.to_datetime(value)
        return True
    except (TypeError, ValueError):
        return False

# Iterate over columns and values to map them
for column_name in file.columns:
    # values = file[column_name].unique
    values = file[column_name]
    map_values_to_columns(column_name, values, data_mapping)

# Load the original workbook based on the selected template file
wb = load_workbook(template_file)

# Get the existing 'Field Mapping' sheet
ws = wb['Field Mapping']

# Convert column names to column numbers (A=1, B=2, ...)
column_numbers = {col: idx + 1 for idx, col in enumerate(data_mapping.values())}

# Iterate over the rows in the 'Field Mapping' sheet
for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=4, max_col=4):
    innovu_data_element = row[0].value
    # Check if the innovu data element matches any of the mapped column names
    for column_name in file.columns:
        if innovu_data_element == data_mapping.get(column_name, None):
            column_number = file.columns.get_loc(column_name) + 1  # Adjust to 1-based indexing
            # Write the original header name to column 6 and column number to column 7
            ws.cell(row=row[0].row, column=6).value = column_name
            ws.cell(row=row[0].row, column=7).value = column_number
            break  # Exit the loop once a match is found

# Save the updated workbook with the new mapping, incorporating the vendor file code
#output_filename = f"IA_fm_{vendor_code}__mr_enrD_4.2.xlsx"

# Specify the file path
#file_path = f"C:/Users/andre/Downloads/{output_filename}"

# Save the workbook to the specified location
#wb.save(file_path)

#wb.save(output_filename)


# Generate the output filename using the vendor_code variable
output_filename = f"IA_fm_{vendor_code}_mr_enrD_4.2.xlsx"

# Get the current user's home directory and then the Downloads folder
downloads_folder = os.path.join(os.path.expanduser("~"), "Downloads")

# Combine the Downloads folder with the output filename to create the full file path
file_path = os.path.join(downloads_folder, output_filename)

# Save the workbook to the specified location
wb.save(file_path)

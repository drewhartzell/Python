import requests
from bs4 import BeautifulSoup
import pandas as pd

def get_key_statistics(ticker):
    url = f'https://finance.yahoo.com/quote/{ticker}/key-statistics?p={ticker}'
    headers = {'User-Agent': 'Mozilla/5.0'}
    response = requests.get(url, headers=headers)
    soup = BeautifulSoup(response.text, 'html.parser')
    
    tables = soup.find_all("table")
    data = {}
    for table in tables:
        rows = table.find_all("tr")
        for row in rows:
            cells = row.find_all("td")
            if len(cells) == 2:
                label = cells[0].text.strip()
                value = cells[1].text.strip()
                data[label] = value
    data["Ticker"] = ticker.upper()
    return data

# Get stats for AAPL and CCL
tickers = ['AAPL', 'CCL', 'MSFT', 'TSLA', 'PYPL', 'SNOW', 'TEAM', 'HOOD', 'BABA', 'TM', 'META','BA', 'MAR', 'RCL']
all_data = []

for ticker in tickers:
    stats = get_key_statistics(ticker)
    all_data.append(stats)

# Convert list of dicts to DataFrame
df = pd.DataFrame(all_data)

# Move Ticker to the first column
cols = ['Ticker'] + [col for col in df.columns if col != 'Ticker']
df = df[cols]

# Save to CSV
df.to_csv("stocks.csv", index=False)

print("✅ Saved key statistics for 'stocks.csv'")


--------------------------------------------------------------------------------------------------------------


import requests
from bs4 import BeautifulSoup
import pandas as pd
import yfinance as yf
import re

# Convert shorthand finance values like 40.6B to full numbers
# def convert_shorthand(value):
    # if isinstance(value, str):
       # multipliers = {'T': 1e12, 'B': 1e9, 'M': 1e6, 'K': 1e3}
       # match = re.match(r'([\d\.]+)([TBMK])?', value.replace(',', ''))
       # if match:
           # num, suffix = match.groups()
           # return int(float(num) * multipliers.get(suffix, 1))
   # return value

# Scrape key statistics using BeautifulSoup
def get_key_statistics(ticker):
    url = f'https://finance.yahoo.com/quote/{ticker}/key-statistics?p={ticker}'
    headers = {'User-Agent': 'Mozilla/5.0'}
    response = requests.get(url, headers=headers)
    soup = BeautifulSoup(response.text, 'html.parser')

    tables = soup.find_all("table")
    data = {}
    for table in tables:
        rows = table.find_all("tr")
        for row in rows:
            cells = row.find_all("td")
            if len(cells) == 2:
                label = cells[0].text.strip()
                value = cells[1].text.strip()
                data[label] = value
    return data

# Use yfinance to add additional fields
def get_yfinance_data(ticker):
    stock = yf.Ticker(ticker)
    info = stock.info
    return {
        "Ticker": ticker.upper(),
        "Current Price": info.get("currentPrice"),
        "Market Cap": info.get("marketCap"),
        "PE Ratio (FWD)": info.get("forwardPE"),
        "Dividend Yield (FWD)": info.get("dividendYield"),
        "52 Week Range": f"{info.get('fiftyTwoWeekLow')} - {info.get('fiftyTwoWeekHigh')}",
        "Analyst Views": info.get("recommendationMean"),
        "Sentiments": info.get("recommendationKey")
    }

# Combine both data sources
def get_full_stock_data(ticker):
    stats_data = get_key_statistics(ticker)
    yf_data = get_yfinance_data(ticker)
    # Merge and avoid overwriting yfinance fields with duplicate keys
    combined = yf_data.copy()
    for k, v in stats_data.items():
        if k not in combined:
            combined[k] = v
    return combined

# List of tickers to fetch
tickers = ['AAPL', 'CCL', 'MSFT', 'TSLA', 'PYPL', 'SNOW', 'TEAM', 'HOOD', 'BABA', 'TM', 'META','BA', 'MAR', 'RCL',
           'DAL', 'T', 'RYCEY', 'NIO', 'ERJ', 'COIN', 'PLTR', 'DOCU', 'DASH', 'QQQ', 'VOO', 'DKNG', 'NVDA', 'SCHD',
           'NVO', 'ENPH', 'OSCR', 'AMD', 'CMG', 'HIMS', 'SOFI', 'NU', 'DBX', 'MSA', 'UNC']

# Collect data
all_data = []
for ticker in tickers:
    try:
        data = get_full_stock_data(ticker)
        all_data.append(data)
        print(f"✅ Pulled data for {ticker}")
    except Exception as e:
        print(f"❌ Error pulling data for {ticker}: {e}")

# Create and save DataFrame
df = pd.DataFrame(all_data)
df.to_csv("stocks all.csv", index=False)
print("✅ Saved all stock data to 'stocks all.csv'")

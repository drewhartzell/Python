import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("Covid_data.csv") ##

print(df.head())
print(df.info())
print(df.describe())

#
#

num_records = df.shape[0]
years_range = df['Start Date'].min(), df['End Date'].max()
print(f"Total records: {num_records}")
print(f"Years covered: {years_range[0]} - {years_range[1]}")

#
#

usa_by_total_data = df[ (df['State'] == 'United States') &
                        (df['Group'] == 'By Total') &
                        (df['Age Group'] == 'All Ages')].shape[0]
total_deaths = df['COVID-19 Deaths'].sum()
num_mentions = df['Number of Mentions'].sum()
print(f"USA, by total, all ages records: {usa_by_total_data}")
print(f"USA, by total, all ages deaths: {total_deaths}")
print(f"USA, by total, all ages mentions: {num_mentions}")

#
# 

# plt.figure(figsize=(10, 6))
# plt.bar(x='Condition', y='COVID-19 Deaths', color = 'skyblue') # bar, scatter, plot
# plt.title('Condition by Deaths')
# plt.xlabel("Condition")
# plt.ylabel("Deaths")
# plt.show()

#
# seaborn

# plt.figure(figsize=(10, 6))
# sns.barplot(data=df, x='Condition', y='COVID-19 Deaths', color='skyblue')
# plt.title('Condition by Deaths')
# plt.xlabel("Condition")
# plt.ylabel("Deaths")
# plt.xticks(rotation=45)
# plt.tight_layout()
# plt.show()

plt.figure(figsize=(10, 6))
plt.bar(df['Condition Group'], df['COVID-19 Deaths'], color='skyblue')
plt.title('Condition by Deaths')
plt.xlabel("Condition")
plt.ylabel("Deaths")
plt.xticks(rotation=45)  # Optional: rotate x labels if they're long
plt.tight_layout()
plt.show()

-----------------------------------------------------------------------------------------------------------------


#Â Write your code here
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn import metrics

# Load the dataset
crops = pd.read_csv("soil_measures.csv")

# Check for missing values
crops.isna().sum()

# Check how many crops we have, i.e., multi-class target
crops.crop.unique()

# Split into feature and target sets
X = crops.drop(columns="crop")
y = crops["crop"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(
    X,
    y,
    test_size=0.2,
    random_state=42
)

# Create a dictionary to store the model performance for each feature
feature_performance = {}

# Train a logistic regression model for each feature
for feature in ["N", "P", "K", "ph"]:
    log_reg = LogisticRegression(multi_class="multinomial")
    log_reg.fit(X_train[[feature]], y_train)
    y_pred = log_reg.predict(X_test[[feature]])
    
    # Calculate F1 score, the harmonic mean of precision and recall
    # Could also use balanced_accuracy_score
    f1 = metrics.f1_score(y_test, y_pred, average="weighted")
    
    # Add feature-f1 score pairs to the dictionary
    feature_performance[feature] = f1
    print(f"F1-score for {feature}: {f1}")

# K produced the best F1 score
# Store in best_predictive_feature dictionary
best_predictive_feature = {"K": feature_performance["K"]}
best_predictive_feature

----------------------------------------------------------------------------------------------------------------


import pandas as pd
import sqlite3

# Load your CSV into a pandas DataFrame
df = pd.read_csv('Covid_data.csv')

# Create an in-memory SQLite database
conn = sqlite3.connect(':memory:')

# Load DataFrame into the SQLite database
df.to_sql('my_table', conn, index=False, if_exists='replace')

# Run your SQL query
query = """
SELECT 
    "Condition Group", 
    "Age Group",
    SUM("COVID-19 Deaths") AS Total_Deaths
FROM my_table
WHERE
    "State" = 'United States'
    AND "Group" = 'By Total'
    AND "Age Group" <> 'All Ages'
    AND "Age Group" <> 'Not stated'
GROUP BY "Condition Group", "Age Group"
HAVING 
    Total_Deaths <> 0
ORDER BY Total_Deaths DESC
"""

# Execute and fetch results
result_df = pd.read_sql_query(query, conn)

# Show result
print(result_df)
